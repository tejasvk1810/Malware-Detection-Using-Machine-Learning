import os
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn import tree, svm
from sklearn.linear_model import LinearRegression
import sklearn.ensemble as ek

# Install required packages
os.system('pip install sklearn')
os.system('pip install --upgrade scikit-learn==0.20.3')

# Set title and sidebar
st.set_page_config(page_title="Malware Detection", layout="wide")
st.title("Malware Detection Using Machine Learning")
st.sidebar.subheader("Tasks")

# Load dataset
uploaded_file = st.sidebar.file_uploader("Upload Dataset", type="csv")
if uploaded_file is not None:
    dataset = pd.read_csv(uploaded_file, sep='|', low_memory=False)

    # Display dataset
    st.subheader("Dataset")
    st.write(dataset)

    # Perform data splitting
    split_button = st.sidebar.button("Begin Detection")
    if split_button:
        X = dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
        y = dataset['legitimate'].values
        legit_train, legit_test, mal_train, mal_test = train_test_split(X, y, test_size=0.2)
        st.success("Data Splitting Done!")

        # Train the Random Forest Classifier
        classifier = RandomForestClassifier(n_estimators=50)
        classifier.fit(legit_train, mal_train)
        st.success("Classifier Trained!")

        # Calculate the score
        score = classifier.score(legit_test, mal_test)
        st.subheader("Classifier Score")
        st.success(score)

        # Calculate and display the confusion matrix
        result = classifier.predict(legit_test)
        conf_matrix = confusion_matrix(mal_test, result)
        st.subheader("Confusion Matrix")
        st.write(conf_matrix)

        # Calculate false positives and false negatives
        fp = conf_matrix[0][1] * 100 / sum(conf_matrix[0])
        fn = conf_matrix[1][0] * 100 / sum(conf_matrix[1])
        st.subheader("False Positives and False Negatives")
        st.success("False Positives: {:.2f}%".format(fp))
        st.success("False Negatives: {:.2f}%".format(fn))

        # Calculate the percentage of benign and malware files
        total_files = len(dataset)
        benign_files = dataset['legitimate'].value_counts()[1]
        malware_files = dataset['legitimate'].value_counts()[0]
        benign_percentage = (benign_files / total_files) * 100
        malware_percentage = (malware_files / total_files) * 100

        # Visualize the percentage of benign and malware files
        labels = ['Benign Files', 'Malware Files']
        sizes = [benign_percentage, malware_percentage]
        colors = ['#1f77b4', '#d62728']
        explode = (0.1, 0)
        fig1, ax1 = plt.subplots(figsize=(6, 4))
        ax1.pie(sizes, labels=labels, colors=colors, explode=explode, autopct='%1.1f%%', startangle=90)
        ax1.axis('equal')
        ax1.set_title("Percentage of Benign and Malware Files")
        st.pyplot(fig1)

        # Display the percentage of benign and malware files
        st.subheader("File Distribution")
        st.success("Benign Files: {:.2f}%".format(benign_percentage))
        st.success("Malware Files: {:.2f}%".format(malware_percentage))

        # Train other models and display scores
        st.sidebar.subheader("Other Models")
        models = {
            "Decision Tree": tree.DecisionTreeClassifier(max_depth=10),
            "Random Forest": ek.RandomForestClassifier(n_estimators=50),
            "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
            "Linear Regression": LinearRegression()
        }

        scores = []
        for algo in models:
            clf = models[algo]
            clf.fit(legit_train, mal_train)
            score = clf.score(legit_test, mal_test)
            scores.append(score)
            st.sidebar.success(f"{algo} Trained!")
            st.sidebar.success(f"{algo} Score: {score}")

        # Visualize scores of other models
        fig2, ax2 = plt.subplots(figsize=(6, 4))
        ax2.bar(models.keys(), scores)
        ax2.set_xlabel("Models")
        ax2.set_ylabel("Score")
        ax2.set_title("Scores of Other Models")
        ax2.set_ylim([0, 1])
        ax2.grid(True)
        plt.xticks(rotation=45)
        st.pyplot(fig2)

        # Calculate true positives and true negatives
        true_positives = np.sum((result == 1) & (mal_test == 1))
        true_negatives = np.sum((result == 0) & (mal_test == 0))

        # Visualize true positives, true negatives, false positives, and false negatives
        labels = ['True Positives', 'True Negatives', 'False Positives', 'False Negatives']
        sizes = [true_positives, true_negatives, fp, fn]
        colors = ['#1f77b4', '#2ca02c', '#d62728', '#ff7f0e']
        explode = (0.1, 0, 0, 0)
        fig3, ax3 = plt.subplots(figsize=(6, 4))
        ax3.pie(sizes, labels=labels, colors=colors, explode=explode, autopct='%1.1f%%', startangle=90)
        ax3.axis('equal')
        ax3.set_title("Classification Results")
        st.pyplot(fig3)
